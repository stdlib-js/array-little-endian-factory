{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/from_iterator_map.js","../lib/from_iterator.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len, no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\nimport ITERATOR_SYMBOL from '@stdlib/symbol-iterator';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport getter from '@stdlib/array-base-getter';\nimport accessorGetter from '@stdlib/array-base-accessor-getter';\nimport inherits from '@stdlib/utils-inherit';\nimport fixedEndianFactory from '@stdlib/array-fixed-endian-factory';\nimport bytesPerElement from '@stdlib/ndarray-base-bytes-per-element';\nimport capitalize from '@stdlib/string-base-capitalize';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport fromIterator from './from_iterator.js';\nimport fromIteratorMap from './from_iterator_map.js';\n\n\n// VARIABLES //\n\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\nvar BYTE_ORDER = 'little-endian';\nvar DTYPE2SET = {\n\t'float64': 'setFloat64',\n\t'float32': 'setFloat32',\n\t'int32': 'setInt32',\n\t'int16': 'setInt16',\n\t'uint32': 'setUint32',\n\t'uint16': 'setUint16'\n};\nvar CHAR2ARTICLE = {\n\t'c': 'a',\n\t'f': 'a',\n\t'i': 'an',\n\t'u': 'a',\n\t'b': 'a'\n};\n\n\n// FUNCTIONS //\n\n/**\n* Converts a data type string to a constructor name.\n*\n* @private\n* @param {string} dtype - data type\n* @returns {string} constructor name\n*\n* @example\n* var n = dtype2ctor( 'float64' );\n* // returns 'Float64ArrayLE'\n*\n* @example\n* var n = dtype2ctor( 'int32' );\n* // returns 'Int32ArrayLE'\n*/\nfunction dtype2ctor( dtype ) {\n\treturn capitalize( dtype ) + 'ArrayLE';\n}\n\n\n// MAIN //\n\n/**\n* Returns a typed array constructor for creating typed arrays stored in little-endian byte order.\n*\n* @param {string} dtype - typed array data type\n* @throws {TypeError} first argument must be a supported data type\n* @returns {Function} typed array constructor\n*\n* @example\n* var Float64ArrayLE = factory( 'float64' );\n*\n* var arr = new Float64ArrayLE();\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 0\n*\n* @example\n* var Float64ArrayLE = factory( 'float64' );\n*\n* var arr = new Float64ArrayLE( 2 );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* var Float64ArrayLE = factory( 'float64' );\n*\n* var arr = new Float64ArrayLE( [ 1.0, 2.0 ] );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var Float64ArrayLE = factory( 'float64' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new Float64ArrayLE( buf );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 2\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var Float64ArrayLE = factory( 'float64' );\n*\n* var buf = new ArrayBuffer( 16 );\n* var arr = new Float64ArrayLE( buf, 8 );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 1\n*\n* @example\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var Float64ArrayLE = factory( 'float64' );\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Float64ArrayLE( buf, 8, 2 );\n* // returns <Float64ArrayLE>\n*\n* var len = arr.length;\n* // returns 2\n*/\nfunction factory( dtype ) {\n\tvar BYTES_PER_ELEMENT;\n\tvar CTOR_NAME;\n\tvar SETTER;\n\tvar parent;\n\n\t// Defer `dtype` validation to `fixedEndianFactory`:\n\tparent = fixedEndianFactory( dtype );\n\n\tBYTES_PER_ELEMENT = bytesPerElement( dtype );\n\tCTOR_NAME = dtype2ctor( dtype );\n\tSETTER = DTYPE2SET[ dtype ];\n\n\t/**\n\t* Typed array constructor which returns a typed array representing an array of values in little-endian byte order.\n\t*\n\t* @private\n\t* @constructor\n\t* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or an iterable\n\t* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n\t* @param {NonNegativeInteger} [length] - view length\n\t* @throws {TypeError} if provided only one argument, the argument must be a valid argument\n\t* @throws {TypeError} byte offset must be a nonnegative integer\n\t* @throws {RangeError} must provide sufficient memory to accommodate byte offset and view length requirements\n\t* @returns {TypedArray} typed array instance\n\t*/\n\tfunction TypedArray() {\n\t\tvar nargs = arguments.length;\n\t\tif ( !(this instanceof TypedArray) ) {\n\t\t\tif ( nargs === 0 ) {\n\t\t\t\treturn new TypedArray();\n\t\t\t}\n\t\t\tif ( nargs === 1 ) {\n\t\t\t\treturn new TypedArray( arguments[0] );\n\t\t\t}\n\t\t\tif ( nargs === 2 ) {\n\t\t\t\treturn new TypedArray( arguments[0], arguments[1] );\n\t\t\t}\n\t\t\treturn new TypedArray( arguments[0], arguments[1], arguments[2] );\n\t\t}\n\t\tif ( nargs === 0 ) {\n\t\t\tparent.call( this, BYTE_ORDER );\n\t\t} else if ( nargs === 1 ) {\n\t\t\tparent.call( this, BYTE_ORDER, arguments[0] );\n\t\t} else if ( nargs === 2 ) {\n\t\t\tparent.call( this, BYTE_ORDER, arguments[0], arguments[1] );\n\t\t} else if ( nargs === 3 ) {\n\t\t\tparent.call( this, BYTE_ORDER, arguments[0], arguments[1], arguments[2] );\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t* Size (in bytes) of each array element.\n\t*\n\t* @private\n\t* @name BYTES_PER_ELEMENT\n\t* @memberof TypedArray\n\t* @readonly\n\t* @type {PositiveInteger}\n\t*/\n\tsetReadOnly( TypedArray, 'BYTES_PER_ELEMENT', BYTES_PER_ELEMENT );\n\n\t/**\n\t* Constructor name.\n\t*\n\t* @private\n\t* @name name\n\t* @memberof TypedArray\n\t* @readonly\n\t* @type {string}\n\t*/\n\tsetReadOnly( TypedArray, 'name', CTOR_NAME );\n\n\t/**\n\t* Creates a new typed array from an array-like object or an iterable.\n\t*\n\t* @private\n\t* @name from\n\t* @memberof TypedArray\n\t* @type {Function}\n\t* @param {(Collection|Iterable)} src - array-like object or iterable\n\t* @param {Function} [clbk] - callback to invoke for each source element\n\t* @param {*} [thisArg] - context\n\t* @throws {TypeError} `this` context must be a constructor\n\t* @throws {TypeError} `this` must be a typed array constructor\n\t* @throws {TypeError} first argument must be an array-like object or an iterable\n\t* @throws {TypeError} second argument must be a function\n\t* @returns {TypedArray} typed array instance\n\t*/\n\tsetReadOnly( TypedArray, 'from', function from( src ) {\n\t\tvar thisArg;\n\t\tvar nargs;\n\t\tvar clbk;\n\t\tvar out;\n\t\tvar buf;\n\t\tvar tmp;\n\t\tvar get;\n\t\tvar len;\n\t\tvar i;\n\t\tif ( !isFunction( this ) ) {\n\t\t\tthrow new TypeError( format('null01') );\n\t\t}\n\t\tif ( !isTypedArrayConstructor( this ) ) {\n\t\t\tthrow new TypeError( format( 'invalid invocation. `this` is not %s %s.', CHAR2ARTICLE[ dtype[0] ], CTOR_NAME ) );\n\t\t}\n\t\tnargs = arguments.length;\n\t\tif ( nargs > 1 ) {\n\t\t\tclbk = arguments[ 1 ];\n\t\t\tif ( !isFunction( clbk ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2H', clbk ) );\n\t\t\t}\n\t\t\tif ( nargs > 2 ) {\n\t\t\t\tthisArg = arguments[ 2 ];\n\t\t\t}\n\t\t}\n\t\tif ( isCollection( src ) ) {\n\t\t\tif ( clbk ) {\n\t\t\t\tlen = src.length;\n\t\t\t\tif ( src.get && src.set ) {\n\t\t\t\t\tget = accessorGetter( 'default' );\n\t\t\t\t} else {\n\t\t\t\t\tget = getter( 'default' );\n\t\t\t\t}\n\t\t\t\tout = new this( len );\n\t\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tbuf[ SETTER ]( i*BYTES_PER_ELEMENT, clbk.call( thisArg, get( src, i ), i ), true );\n\t\t\t\t}\n\t\t\t\treturn out;\n\t\t\t}\n\t\t\treturn new this( src );\n\t\t}\n\t\tif ( isObject( src ) && HAS_ITERATOR_SYMBOL && isFunction( src[ ITERATOR_SYMBOL ] ) ) {\n\t\t\tbuf = src[ ITERATOR_SYMBOL ]();\n\t\t\tif ( !isFunction( buf.next ) ) {\n\t\t\t\tthrow new TypeError( format( 'null2J', src ) );\n\t\t\t}\n\t\t\tif ( clbk ) {\n\t\t\t\ttmp = fromIteratorMap( buf, clbk, thisArg );\n\t\t\t} else {\n\t\t\t\ttmp = fromIterator( buf );\n\t\t\t}\n\t\t\tlen = tmp.length;\n\t\t\tout = new this( len );\n\t\t\tbuf = out._buffer; // eslint-disable-line no-underscore-dangle\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tbuf[ SETTER ]( i*BYTES_PER_ELEMENT, tmp[ i ], true );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\tthrow new TypeError( format( 'null2J', src ) );\n\t});\n\n\t/**\n\t* Creates a new typed array from a variable number of arguments.\n\t*\n\t* @private\n\t* @name of\n\t* @memberof TypedArray\n\t* @type {Function}\n\t* @param {...*} element - array elements\n\t* @throws {TypeError} `this` context must be a constructor\n\t* @throws {TypeError} `this` must be a typed array constructor\n\t* @returns {TypedArray} typed array instance\n\t*/\n\tsetReadOnly( TypedArray, 'of', function of() {\n\t\tvar args;\n\t\tvar i;\n\t\tif ( !isFunction( this ) ) {\n\t\t\tthrow new TypeError( format('null01') );\n\t\t}\n\t\tif ( !isTypedArrayConstructor( this ) ) {\n\t\t\tthrow new TypeError( format( 'invalid invocation. `this` is not %s %s.', CHAR2ARTICLE[ dtype[0] ], CTOR_NAME ) );\n\t\t}\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn new this( args );\n\t});\n\n\t// Inherit from the parent constructor:\n\tinherits( TypedArray, parent );\n\n\treturn TypedArray;\n\n\t/**\n\t* Returns a boolean indicating if a value is a typed array constructor.\n\t*\n\t* @private\n\t* @param {*} value - value to test\n\t* @returns {boolean} boolean indicating if a value is a typed array constructor\n\t*/\n\tfunction isTypedArrayConstructor( value ) {\n\t\treturn ( value === TypedArray );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {Array} output array\n*/\nfunction fromIteratorMap( it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t\tout.push( clbk.call( thisArg, v.value, i ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIteratorMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {Array} output array\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tout.push( v.value );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIterator;\n"],"names":["HAS_ITERATOR_SYMBOL","hasIteratorSymbolSupport","BYTE_ORDER","DTYPE2SET","float64","float32","int32","int16","uint32","uint16","CHAR2ARTICLE","c","f","i","u","b","factory","dtype","BYTES_PER_ELEMENT","CTOR_NAME","SETTER","parent","TypedArray","nargs","arguments","length","this","call","fixedEndianFactory","bytesPerElement","capitalize","dtype2ctor","setReadOnly","src","thisArg","clbk","out","buf","tmp","get","len","isFunction","TypeError","format","isTypedArrayConstructor","isCollection","set","accessorGetter","getter","_buffer","isObject","ITERATOR_SYMBOL","next","it","v","done","push","value","fromIteratorMap","fromIterator","args","inherits"],"mappings":"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"}